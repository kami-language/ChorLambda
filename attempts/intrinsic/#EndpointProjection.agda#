module EndpointProjection where

open import Data.List using (List; []; _++_; _∷_; [_]; map)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Product using (Σ; _×_; _,_; _,′_; proj₂)
open import Relation.Nullary.Decidable using (Dec; yes; no; _because_; _×-dec_; _⊎-dec_ )
open import Function using (case_of_)
open import Data.Fin.Properties using (_≟_)
open import Relation.Binary.PropositionalEquality using (_≡_; cong; sym; refl)
open import Relation.Nullary using (¬_)
open import Relation.Nullary.Negation using () renaming (contradiction to _↯_)

open import Base
open import Utils
open import Global
open import Local

mutual

  -- carful! duplicates!
  ivroles : ∀ {Θ Γ} {T : IType Θ} → (Γ ⊩ᵥ T) → List (Role Θ)
  ivroles (tabs ρ x) = icroles x
  ivroles (tvar x) = []
  ivroles (tunit r) = [ r ]
  ivroles (tcom r s) = r ∷ [ s ]
  ivroles (tpair Ts Ts₁) = ivroles Ts ++ ivroles Ts₁
  ivroles tproj1 = []
  ivroles tproj2 = []
  ivroles (tinl Ts) = ivroles Ts
  ivroles (tinr Ts) = ivroles Ts

  icroles : ∀ {Θ Γ} {T : IType Θ} → (Γ ⊩ₘ T) → List (Role Θ)
  icroles (tapp Ts Ts₁) = icroles Ts ++ icroles Ts₁
  icroles (tsel Ts r s l) = r ∷ s ∷ (icroles Ts)
  icroles (tcase Ts Ts₁ Ts₂) = icroles Ts ++ icroles Ts₁ ++ icroles Ts₂
  icroles (tval v) = ivroles v

----------------------------------------------------

postulate
  oops : ∀ {ℓ} {T : Set ℓ} {A B : List T} {t : T} → t ∈ (A ++ B) ++ B → t ∈ (A ++ B)
  spoo : ∀ {ℓ} {T : Set ℓ} {A B : List T} {t : T} → t ∈ (A ++ B) ++ A → t ∈ (A ++ B)


transp-⊢ᵥ-Type : ∀{Θ Γ} {T T' : ILType Θ} -> T ≡ T' -> Γ ⊢ᵥ T -> Γ ⊢ᵥ T'
transp-⊢ᵥ-Type refl Ts = Ts

transp-⊢ₘ-Type : ∀{Θ Γ} {T T' : ILType Θ} -> T ≡ T' -> Γ ⊢ₘ T -> Γ ⊢ₘ T'
transp-⊢ₘ-Type refl Ts = Ts

π : ∀ {Θ} → Role Θ → IType Θ → ILType Θ
π R T with R ∈? roles T
... | no _ = ⊥
π R (⟶ ρ T T₁) | yes _ = π R T ⇒ π R T₁
π R (T ＋ T₁) | yes _ = π R T ＋ π R T₁
π R (T ⋆ T₁) | yes _ = π R T ⋆ π R T₁
π R (o＠ r) | yes _ = o

projectNonPart⊥ : ∀ {Θ} {T : IType Θ} {R : Role Θ} → (R ∉ (roles T)) → (π R T) ≡ ⊥
projectNonPart⊥ {Θ} {T} {R} R∉ with R ∈? roles T
... | yes R∈ = R∈ ↯ R∉
... | no _ = refl


project⟶ : ∀ {Θ} {T T′ : IType Θ} {R : Role Θ} {ρ : List (Role Θ)} → R ∈ roles (⟶ ρ T T′) →  π R (⟶ ρ T T′) ≡ (π R T) ⇒ (π R T′)
project⟶ = {!!}

project＋ : ∀ {Θ} {T T′ : IType Θ} {R : Role Θ} → R ∈ roles (T ＋ T′) →  π R (T ＋ T′) ≡ (π R T) ＋ (π R T′)
project＋ = {!!}

project⋆ : ∀ {Θ} {T T′ : IType Θ} {R : Role Θ} → R ∈ roles (T ⋆ T′) →  (π R T) ⋆ (π R T′) ≡ π R (T ⋆ T′)
project⋆ = {!!}

add⊥ : ∀ {Θ } {Γ : List (ILType Θ)} {T T′ : ILType Θ} → Γ ⊢ₘ T → (T′ ∷ Γ) ⊢ₘ T
add⊥ bot = {!bot!}


join-∨-⊥ : ∀{Θ} {Γ : List (ILType Θ)} -> Γ ⊢ₘ ⊥ -> Γ ⊢ₘ ⊥ -> Γ ⊢ₘ ⊥
join-∨-⊥ (ntval ntbotm) (ntval ntbotm) = ntval ntbotm
join-∨-⊥ X (ntval (ntbotm)) = X
join-∨-⊥ X Y = Y


π* : ∀ {Θ} → Role Θ → List (IType Θ) → List (ILType Θ)
π* R Γ = map (π R) Γ

mutual

  projectIntrinsicValue : ∀ {Θ Γ} {T : IType Θ} (R : Role Θ) → Γ ⊩ᵥ T → π* R Γ ⊢ᵥ (π R T)

  projectIntrinsicValue {T = T} R (tvar x)  with R ∈? roles T
  ... | no _ = ntbotm
  projectIntrinsicValue {T = ⟶ ρ T T₁} R (tvar x) | yes _ = ntvar {!map-∈ {f = π R} x!}
  projectIntrinsicValue {T = T ＋ T₁} R (tvar x) | yes _ = ntvar {!!}
  projectIntrinsicValue {T = T ⋆ T₁} R (tvar x) | yes _ = ntvar {!!}
  projectIntrinsicValue {T = o＠ r} R (tvar x) | yes _ = ntvar {!!}
  -- {! map-∈ {f = π R} x!}
  projectIntrinsicValue {T = T} R (tcom r s)  with R ∈? roles T
  ... | no _ = ntbotm
  ... | yes _ = {!!}
  
  projectIntrinsicValue {T = T} R (tunit r)  with R ∈? roles T
  ... | no _ = ntbotm
  ... | yes _ = ntunit
  projectIntrinsicValue {T = T} R (tpair M M₁)  with R ∈? roles T
  ... | no _ = ntbotm
  ... | yes _ = ntpair (projectIntrinsicValue R M) (projectIntrinsicValue R M₁)
  projectIntrinsicValue {T = T} R (tabs ρ x)  with R ∈? roles T
  ... | no _ = ntbotm
  ... | yes _ = ntabs (projectIntrinsicChoreo R x)
  projectIntrinsicValue {T = ⟶ [] (T ⋆ T′) T} R tproj1  with R ∈? roles (⟶ [] (T ⋆ T′) T)
  ... | no _ = ntbotm
  ... | yes R∈T = transp-⊢ᵥ-Type (cong (λ t → t ⇒ π R T) (project⋆ (spoo {A = roles T} R∈T))) ntproj1
  projectIntrinsicValue {T = ⟶ [] (T ⋆ T′) T′} R tproj2  with R ∈? roles (⟶ [] (T ⋆ T′) T′)
  ... | no _ = ntbotm
  ... | yes R∈T = transp-⊢ᵥ-Type (cong (λ t → t ⇒ π R T′) (project⋆ (oops {A = roles T} R∈T))) ntproj2
  projectIntrinsicValue {T = T} R (tinl M)  with R ∈? roles T
  ... | no _ = ntbotm
  ... | yes _ =  ntinl (projectIntrinsicValue R M)
  projectIntrinsicValue {T = T} R (tinr M)  with R ∈? roles T
  ... | no _ = ntbotm
  ... | yes R∈T =  ntinr (projectIntrinsicValue R M)

{-
  projectIntrinsicValue {T = _} R (tabs ρ x) | yes _ = ntabs {!!}
  projectIntrinsicValue {T = _} R (tvar x) | yes _ = ntvar {!!}
  projectIntrinsicValue {T = _} R (tunit r) | yes _ = ntunit
  projectIntrinsicValue {T = T} R (tcom r s) | yes _ = {!!}
  projectIntrinsicValue {T = _} R (tpair M M₁) | yes _ = ntpair (projectIntrinsicValue R M) (projectIntrinsicValue R M₁)
  projectIntrinsicValue {T = ⟶ [] (T ⋆ T′) T} R tproj1 | yes R∈T = transp-⊢ᵥ-Type (cong (λ t → t ⇒ π R T) (project⋆ (spoo {A = roles T} R∈T))) ntproj1
  projectIntrinsicValue {T = ⟶ [] (T ⋆ T′) T′} R tproj2 | yes R∈T = transp-⊢ᵥ-Type (cong (λ t → t ⇒ π R T′) (project⋆ (oops {A = roles T} R∈T))) ntproj2
  projectIntrinsicValue {T = _} R (tinl M) | yes _ = ntinl (projectIntrinsicValue R M)
  projectIntrinsicValue {T = _} R (tinr M) | yes _ = ntinr (projectIntrinsicValue R M)
  -}


  projectIntrinsicChoreo : ∀ {Θ Γ} {T : IType Θ} (R : Role Θ) → Γ ⊩ₘ T → π* R Γ ⊢ₘ (π R T)
  projectIntrinsicChoreo R (tval v) = ntval (projectIntrinsicValue R v)
  projectIntrinsicChoreo R (tapp {T} {U} {ρ} Ts Ts₁) with projectIntrinsicChoreo R Ts | projectIntrinsicChoreo R Ts₁ | R ∈? roles (⟶ ρ T U)
  ... | M | N | yes in⟶ = ntapp (transp-⊢ₘ-Type (project⟶ in⟶) M) N
  -- TODO we are missing the case R ∈ roles(M) ∩ roles(N) from the paper
  projectIntrinsicChoreo R (tapp {T} {U} {ρ} Ts Ts₁) | M | N | no R∉ρTU =
    let
        -- construct proofs that since R is not in the union of ρ, T and U
        -- it cannot be in T and U individually as well
        R∉TU : R ∉ roles T ++ roles U
        R∉TU = right-∉ ρ _ R∉ρTU

        R∉U : R ∉ roles U
        R∉U = right-∉ _ _ R∉TU

        R∉T : R ∉ roles T
        R∉T = left-∉ _ _ R∉TU

        -- transport the terms M and N to a type which is properly ⊥
        M⊥ = transp-⊢ₘ-Type (projectNonPart⊥ R∉ρTU) M
        N⊥ = transp-⊢ₘ-Type (projectNonPart⊥ R∉T) N

        -- use the `join-∨-⊥` function to construct the result term
        -- which should throw away an arg if it is `ntval ntbotm`
        Res⊥ = join-∨-⊥ M⊥ N⊥

        -- construct the result term by transporting back from ⊥ to the required
        -- type
        Res = transp-⊢ₘ-Type (sym (projectNonPart⊥ R∉U)) Res⊥
    in Res

  projectIntrinsicChoreo R (tsel Ts r s l) with s ≟ R | r ≟ R | s ≟ r
  ... | yes s=R | no r≠R | no s≠r = ntchor⊕ r l (projectIntrinsicChoreo R Ts)
  ... | no s≠R | yes r=R | no s≠r = ntoff& s [ (l , (projectIntrinsicChoreo R Ts)) ]
  ... | _ | _ | _ = projectIntrinsicChoreo R Ts

  projectIntrinsicChoreo R (tcase {T₁} {T₂} {T} Ts Ts₁ Ts₂) with R ∈? roles (T₁ ＋ T₂) | (projectIntrinsicChoreo R Ts) | (projectIntrinsicChoreo R Ts₁) | (projectIntrinsicChoreo R Ts₂)
  ... | yes R∈T₁＋T₂ | M | N | N′ = ntcase M N N′
  ... | no R∉T₁＋T₂ | M | N | N′ = ntapp (ntval (ntabs (nt⊔ N N′))) M -- we just ignore the other cases as this evaluates to the proper thing

